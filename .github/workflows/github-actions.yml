name: My GitHub Action

run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ

on: workflow_dispatch

permissions:
  id-token: write
  contents: read

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      # - name: Initialize job
      #   run: |
      #     echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      #     echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      #     echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v4

      # - name: List files in the repository
      #   run: |
      #     echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      #     echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

      # - name: List files in the repository
      #   run: |
      #     ls ${{ github.workspace }}
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
        
      - name: Install NPM dependencies
        run: |
          npm install
          echo "üì¶ Dependencies have been installed."

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Build
        run: |
          docker build -t gh_action-swiggy-app:${{ github.run_id }} .
      
      - name: Trivy scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image gh_action-swiggy-app:${{ github.run_id }} --severity HIGH,CRITICAL --format json > trivy-report.json

      - name: Docker tag image as latest
        run: |
          docker tag gh_action-swiggy-app:${{ github.run_id }} ${{ secrets.DOCKERHUB_USERNAME }}/gh_action-swiggy-app:latest

      - name: Docker push latest image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gh_action-swiggy-app:latest

      # - run: echo "üçè This job's status is ${{ job.status }}."

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show
      
      - name: Create AKS in Azure
        run: |
          export MY_RESOURCE_GROUP_NAME="zekn-aks-rg"
          export REGION="westeurope"
          export MY_CLUSTER_NAME="zekn-aks-cluster"
          
          if [ "$(az group list -o tsv --query "[?name=='$MY_RESOURCE_GROUP_NAME'].name")" = "" ];
          then
              echo "No RG was found."
              az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
          else
              echo "RG was found."
          fi

          if [ "$(az aks list -o tsv --query "[?name=='$MY_CLUSTER_NAME'].name")" = "" ];
          then
              echo "No AKS was found."
              az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_CLUSTER_NAME --node-count 1 --generate-ssh-keys --tier Free --os-sku Ubuntu 
          else
              echo "AKS was found."
          fi
                   
      - name: setup k8s profile
        run: |
          az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_CLUSTER_NAME --overwrite-existing

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
